package com.guardix.mobile.ui.screens.tools

import androidx.compose.animation.*
import androidx.compose.animation.core.*
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.rotate
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.guardix.mobile.data.*
import com.guardix.mobile.ui.components.NeumorphicCard
import com.guardix.mobile.ui.theme.*
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import java.text.SimpleDateFormat
import java.util.*

// Data classes for individual tool results
data class MalwareScanResult(
    val totalFiles: Int,
    val threatsFound: Int,
    val cleanFiles: Int,
    val quarantinedFiles: Int,
    val scanDuration: Long,
    val threats: List<ThreatDetails>
)

data class ThreatDetails(
    val fileName: String,
    val filePath: String,
    val threatType: String,
    val severity: String,
    val action: String,
    val detected: String
)

enum class ScanState {
    IDLE, SCANNING, COMPLETED, ERROR
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun MalwareScannerScreen(
    onNavigateBack: () -> Unit = {}
) {
    val context = LocalContext.current
    val scope = rememberCoroutineScope()
    val securityManager = remember { SecurityManager(context) }
    
    var scanState by remember { mutableStateOf(ScanState.IDLE) }
    var scanProgress by remember { mutableStateOf(0f) }
    var scanResult by remember { mutableStateOf<MalwareScanResult?>(null) }
    var currentFile by remember { mutableStateOf("") }
    var realTimeProtection by remember { mutableStateOf(true) }
    var autoCleanEnabled by remember { mutableStateOf(false) }
    
    // Animation for scanning
    val infiniteTransition = rememberInfiniteTransition(label = "malware_scan")
    val rotationAngle by infiniteTransition.animateFloat(
        initialValue = 0f,
        targetValue = 360f,
        animationSpec = infiniteRepeatable(
            animation = tween(3000, easing = LinearEasing),
            repeatMode = RepeatMode.Restart
        ),
        label = "rotation"
    )
    
    fun startMalwareScan() {
        scope.launch {
            scanState = ScanState.SCANNING
            scanProgress = 0f
            currentFile = ""
            
            val sampleFiles = listOf(
                "system/app/Calculator.apk",
                "data/data/com.android.chrome/cache",
                "sdcard/Download/suspicious_file.exe",
                "system/lib/libssl.so",
                "data/app/com.example.app.apk",
                "sdcard/Pictures/vacation.jpg",
                "system/framework/framework.jar"
            )
            
            // Simulate scanning progress
            for (i in 0..100) {
                delay(50)
                scanProgress = i / 100f
                if (i % 15 == 0 && i < 90) {
                    currentFile = sampleFiles.random()
                }
            }
            
            // Generate scan result
            val realScanResult = securityManager.performSecurityScan()
            scanResult = MalwareScanResult(
                totalFiles = 1247,
                threatsFound = realScanResult.threatsFound.size,
                cleanFiles = 1247 - realScanResult.threatsFound.size,
                quarantinedFiles = realScanResult.threatsFound.size,
                scanDuration = 145,
                threats = realScanResult.threatsFound.map { threat ->
                    ThreatDetails(
                        fileName = threat.name,
                        filePath = threat.appPackage ?: "/unknown/path",
                        threatType = threat.type,
                        severity = threat.severity,
                        action = "Quarantined",
                        detected = SimpleDateFormat("HH:mm:ss", Locale.getDefault()).format(Date())
                    )
                }
            )
            
            scanState = ScanState.COMPLETED
        }
    }
    
    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(
                Brush.verticalGradient(
                    colors = listOf(
                        GradientStart.copy(alpha = 0.05f),
                        BackgroundPrimary
                    )
                )
            )
            .padding(16.dp)
    ) {
        // Header with back button
        Row(
            modifier = Modifier.fillMaxWidth(),
            verticalAlignment = Alignment.CenterVertically
        ) {
            IconButton(
                onClick = onNavigateBack,
                modifier = Modifier
                    .clip(CircleShape)
                    .background(LightBlue.copy(alpha = 0.1f))
            ) {
                Icon(
                    imageVector = Icons.Default.ArrowBack,
                    contentDescription = "Back",
                    tint = LightBlue
                )
            }
            
            Spacer(modifier = Modifier.width(12.dp))
            
            Column {
                Text(
                    text = "Malware Scanner",
                    style = MaterialTheme.typography.headlineMedium,
                    fontWeight = FontWeight.Bold,
                    color = GrayText
                )
                
                Text(
                    text = "Advanced threat detection and removal",
                    style = MaterialTheme.typography.bodyMedium,
                    color = GrayDark
                )
            }
        }
        
        Spacer(modifier = Modifier.height(24.dp))
        
        when (scanState) {
            ScanState.IDLE -> {
                IdleScanInterface(
                    realTimeProtection = realTimeProtection,
                    autoCleanEnabled = autoCleanEnabled,
                    onRealTimeToggle = { realTimeProtection = it },
                    onAutoCleanToggle = { autoCleanEnabled = it },
                    onStartScan = { startMalwareScan() }
                )
            }
            
            ScanState.SCANNING -> {
                ScanningInterface(
                    progress = scanProgress,
                    currentFile = currentFile,
                    rotationAngle = rotationAngle
                )
            }
            
            ScanState.COMPLETED -> {
                scanResult?.let { result ->
                    ScanResultInterface(
                        result = result,
                        onNewScan = {
                            scanState = ScanState.IDLE
                            scanResult = null
                        }
                    )
                }
            }
            
            ScanState.ERROR -> {
                ErrorInterface(
                    onRetry = { startMalwareScan() }
                )
            }
        }
    }
}

@Composable
private fun IdleScanInterface(
    realTimeProtection: Boolean,
    autoCleanEnabled: Boolean,
    onRealTimeToggle: (Boolean) -> Unit,
    onAutoCleanToggle: (Boolean) -> Unit,
    onStartScan: () -> Unit
) {
    LazyColumn(
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        item {
            // Protection Status Card
            NeumorphicCard(
                modifier = Modifier.fillMaxWidth()
            ) {
                Column {
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.SpaceBetween,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            text = "Protection Status",
                            style = MaterialTheme.typography.titleMedium,
                            fontWeight = FontWeight.Bold,
                            color = GrayText
                        )
                        
                        Box(
                            modifier = Modifier
                                .clip(RoundedCornerShape(8.dp))
                                .background(SuccessGreen.copy(alpha = 0.1f))
                                .padding(horizontal = 12.dp, vertical = 4.dp)
                        ) {
                            Text(
                                text = "PROTECTED",
                                style = MaterialTheme.typography.labelMedium,
                                fontWeight = FontWeight.Bold,
                                color = SuccessGreen,
                                fontSize = 12.sp
                            )
                        }
                    }
                    
                    Spacer(modifier = Modifier.height(16.dp))
                    
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.SpaceEvenly
                    ) {
                        ProtectionStat(
                            value = "24/7",
                            label = "Monitoring",
                            icon = Icons.Default.Shield,
                            color = SuccessGreen
                        )
                        
                        ProtectionStat(
                            value = "0",
                            label = "Threats",
                            icon = Icons.Default.BugReport,
                            color = LightBlue
                        )
                        
                        ProtectionStat(
                            value = "1.2K",
                            label = "Files Safe",
                            icon = Icons.Default.VerifiedUser,
                            color = Cyan
                        )
                    }
                }
            }
        }
        
        item {
            // Scan Options Card
            NeumorphicCard(
                modifier = Modifier.fillMaxWidth()
            ) {
                Column {
                    Text(
                        text = "Scan Options",
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold,
                        color = GrayText,
                        modifier = Modifier.padding(bottom = 16.dp)
                    )
                    
                    ScanOption(
                        title = "Real-time Protection",
                        description = "Monitor files and apps continuously",
                        enabled = realTimeProtection,
                        onToggle = onRealTimeToggle,
                        icon = Icons.Default.Shield
                    )
                    
                    Spacer(modifier = Modifier.height(16.dp))
                    
                    ScanOption(
                        title = "Auto-clean Threats",
                        description = "Automatically remove detected malware",
                        enabled = autoCleanEnabled,
                        onToggle = onAutoCleanToggle,
                        icon = Icons.Default.CleaningServices
                    )
                }
            }
        }
        
        item {
            // Start Scan Button
            Button(
                onClick = onStartScan,
                modifier = Modifier
                    .fillMaxWidth()
                    .height(56.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = LightBlue,
                    contentColor = Color.White
                ),
                shape = RoundedCornerShape(16.dp)
            ) {
                Icon(
                    imageVector = Icons.Default.Security,
                    contentDescription = "Start Scan",
                    modifier = Modifier.size(24.dp)
                )
                
                Spacer(modifier = Modifier.width(12.dp))
                
                Text(
                    text = "Start Full System Scan",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold
                )
            }
        }
        
        item {
            // Quick Actions
            Text(
                text = "Quick Actions",
                style = MaterialTheme.typography.titleMedium,
                fontWeight = FontWeight.Bold,
                color = GrayText,
                modifier = Modifier.padding(bottom = 8.dp)
            )
            
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                QuickActionCard(
                    title = "Quick Scan",
                    description = "Scan critical areas",
                    icon = Icons.Default.Speed,
                    color = SuccessGreen,
                    modifier = Modifier.weight(1f),
                    onClick = onStartScan
                )
                
                QuickActionCard(
                    title = "Custom Scan",
                    description = "Choose folders",
                    icon = Icons.Default.FolderSpecial,
                    color = WarningOrange,
                    modifier = Modifier.weight(1f),
                    onClick = { /* TODO */ }
                )
            }
        }
    }
}

@Composable
private fun ProtectionStat(
    value: String,
    label: String,
    icon: ImageVector,
    color: Color
) {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Box(
            modifier = Modifier
                .size(48.dp)
                .clip(CircleShape)
                .background(color.copy(alpha = 0.1f)),
            contentAlignment = Alignment.Center
        ) {
            Icon(
                imageVector = icon,
                contentDescription = label,
                tint = color,
                modifier = Modifier.size(24.dp)
            )
        }
        
        Spacer(modifier = Modifier.height(8.dp))
        
        Text(
            text = value,
            style = MaterialTheme.typography.titleLarge,
            fontWeight = FontWeight.Bold,
            color = GrayText
        )
        
        Text(
            text = label,
            style = MaterialTheme.typography.bodySmall,
            color = GrayDark,
            textAlign = TextAlign.Center
        )
    }
}

@Composable
private fun ScanOption(
    title: String,
    description: String,
    enabled: Boolean,
    onToggle: (Boolean) -> Unit,
    icon: ImageVector
) {
    Row(
        modifier = Modifier.fillMaxWidth(),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Icon(
            imageVector = icon,
            contentDescription = title,
            tint = if (enabled) LightBlue else GrayDark,
            modifier = Modifier.size(24.dp)
        )
        
        Spacer(modifier = Modifier.width(12.dp))
        
        Column(
            modifier = Modifier.weight(1f)
        ) {
            Text(
                text = title,
                style = MaterialTheme.typography.titleSmall,
                fontWeight = FontWeight.Medium,
                color = GrayText
            )
            
            Text(
                text = description,
                style = MaterialTheme.typography.bodySmall,
                color = GrayDark
            )
        }
        
        Switch(
            checked = enabled,
            onCheckedChange = onToggle,
            colors = SwitchDefaults.colors(
                checkedThumbColor = LightBlue,
                checkedTrackColor = LightBlue.copy(alpha = 0.3f)
            )
        )
    }
}

@Composable
private fun QuickActionCard(
    title: String,
    description: String,
    icon: ImageVector,
    color: Color,
    modifier: Modifier = Modifier,
    onClick: () -> Unit
) {
    NeumorphicCard(
        modifier = modifier.clickable { onClick() }
    ) {
        Column(
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Box(
                modifier = Modifier
                    .size(40.dp)
                    .clip(CircleShape)
                    .background(color.copy(alpha = 0.1f)),
                contentAlignment = Alignment.Center
            ) {
                Icon(
                    imageVector = icon,
                    contentDescription = title,
                    tint = color,
                    modifier = Modifier.size(20.dp)
                )
            }
            
            Spacer(modifier = Modifier.height(12.dp))
            
            Text(
                text = title,
                style = MaterialTheme.typography.titleSmall,
                fontWeight = FontWeight.SemiBold,
                color = GrayText,
                textAlign = TextAlign.Center
            )
            
            Text(
                text = description,
                style = MaterialTheme.typography.bodySmall,
                color = GrayDark,
                textAlign = TextAlign.Center
            )
        }
    }
}

@Composable
private fun ScanningInterface(
    progress: Float,
    currentFile: String,
    rotationAngle: Float
) {
    Column(
        modifier = Modifier.fillMaxWidth(),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        NeumorphicCard(
            modifier = Modifier.fillMaxWidth()
        ) {
            Column(
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = "Scanning System",
                    style = MaterialTheme.typography.headlineSmall,
                    fontWeight = FontWeight.Bold,
                    color = GrayText
                )
                
                Text(
                    text = "Deep malware analysis in progress",
                    style = MaterialTheme.typography.bodyMedium,
                    color = GrayDark
                )
                
                Spacer(modifier = Modifier.height(32.dp))
                
                // Animated scanning indicator
                Box(
                    modifier = Modifier.size(140.dp),
                    contentAlignment = Alignment.Center
                ) {
                    CircularProgressIndicator(
                        progress = { progress },
                        modifier = Modifier.size(140.dp),
                        color = LightBlue,
                        strokeWidth = 8.dp,
                        trackColor = LightBlue.copy(alpha = 0.2f)
                    )
                    
                    Box(
                        modifier = Modifier
                            .size(100.dp)
                            .rotate(rotationAngle)
                            .clip(CircleShape)
                            .background(
                                Brush.radialGradient(
                                    colors = listOf(
                                        LightBlue.copy(alpha = 0.3f),
                                        LightBlue.copy(alpha = 0.1f)
                                    )
                                )
                            ),
                        contentAlignment = Alignment.Center
                    ) {
                        Icon(
                            imageVector = Icons.Default.Security,
                            contentDescription = "Scanning",
                            tint = LightBlue,
                            modifier = Modifier.size(48.dp)
                        )
                    }
                }
                
                Spacer(modifier = Modifier.height(24.dp))
                
                Text(
                    text = "${(progress * 100).toInt()}% Complete",
                    style = MaterialTheme.typography.titleLarge,
                    fontWeight = FontWeight.Bold,
                    color = GrayText
                )
                
                Spacer(modifier = Modifier.height(8.dp))
                
                if (currentFile.isNotEmpty()) {
                    Text(
                        text = "Scanning: $currentFile",
                        style = MaterialTheme.typography.bodySmall,
                        color = GrayDark,
                        textAlign = TextAlign.Center
                    )
                } else {
                    Text(
                        text = "Analyzing system files...",
                        style = MaterialTheme.typography.bodySmall,
                        color = GrayDark
                    )
                }
            }
        }
    }
}

@Composable
private fun ScanResultInterface(
    result: MalwareScanResult,
    onNewScan: () -> Unit
) {
    LazyColumn(
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        item {
            // Scan Summary Card
            NeumorphicCard(
                modifier = Modifier.fillMaxWidth()
            ) {
                Column {
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.SpaceBetween,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            text = "Scan Complete",
                            style = MaterialTheme.typography.titleLarge,
                            fontWeight = FontWeight.Bold,
                            color = GrayText
                        )
                        
                        Box(
                            modifier = Modifier
                                .clip(RoundedCornerShape(8.dp))
                                .background(
                                    if (result.threatsFound == 0) SuccessGreen.copy(alpha = 0.1f)
                                    else WarningOrange.copy(alpha = 0.1f)
                                )
                                .padding(horizontal = 12.dp, vertical = 4.dp)
                        ) {
                            Text(
                                text = if (result.threatsFound == 0) "CLEAN" else "THREATS FOUND",
                                style = MaterialTheme.typography.labelMedium,
                                fontWeight = FontWeight.Bold,
                                color = if (result.threatsFound == 0) SuccessGreen else WarningOrange,
                                fontSize = 12.sp
                            )
                        }
                    }
                    
                    Spacer(modifier = Modifier.height(16.dp))
                    
                    // Scan Statistics
                    Row(
                        modifier = Modifier.fillMaxWidth(),
                        horizontalArrangement = Arrangement.SpaceEvenly
                    ) {
                        ScanStat(
                            value = result.totalFiles.toString(),
                            label = "Files Scanned",
                            icon = Icons.Default.Description,
                            color = LightBlue
                        )
                        
                        ScanStat(
                            value = result.threatsFound.toString(),
                            label = "Threats Found",
                            icon = Icons.Default.BugReport,
                            color = if (result.threatsFound == 0) SuccessGreen else ErrorRed
                        )
                        
                        ScanStat(
                            value = "${result.scanDuration}s",
                            label = "Scan Time",
                            icon = Icons.Default.Schedule,
                            color = Cyan
                        )
                    }
                }
            }
        }
        
        if (result.threats.isNotEmpty()) {
            item {
                Text(
                    text = "Threats Detected",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold,
                    color = GrayText
                )
            }
            
            items(result.threats) { threat ->
                ThreatItemCard(threat = threat)
            }
        }
        
        item {
            // Action Buttons
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(12.dp)
            ) {
                OutlinedButton(
                    onClick = onNewScan,
                    modifier = Modifier.weight(1f),
                    colors = ButtonDefaults.outlinedButtonColors(
                        contentColor = LightBlue
                    ),
                    border = ButtonDefaults.outlinedButtonBorder.copy(
                        brush = Brush.horizontalGradient(listOf(LightBlue, LightBlue))
                    )
                ) {
                    Icon(
                        imageVector = Icons.Default.Refresh,
                        contentDescription = "New Scan",
                        modifier = Modifier.size(20.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text("New Scan")
                }
                
                Button(
                    onClick = { /* TODO: Generate report */ },
                    modifier = Modifier.weight(1f),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = SuccessGreen,
                        contentColor = Color.White
                    )
                ) {
                    Icon(
                        imageVector = Icons.Default.FileDownload,
                        contentDescription = "Export Report",
                        modifier = Modifier.size(20.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text("Export")
                }
            }
        }
    }
}

@Composable
private fun ScanStat(
    value: String,
    label: String,
    icon: ImageVector,
    color: Color
) {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Icon(
            imageVector = icon,
            contentDescription = label,
            tint = color,
            modifier = Modifier.size(24.dp)
        )
        
        Spacer(modifier = Modifier.height(8.dp))
        
        Text(
            text = value,
            style = MaterialTheme.typography.titleMedium,
            fontWeight = FontWeight.Bold,
            color = GrayText
        )
        
        Text(
            text = label,
            style = MaterialTheme.typography.bodySmall,
            color = GrayDark,
            textAlign = TextAlign.Center
        )
    }
}

@Composable
private fun ThreatItemCard(threat: ThreatDetails) {
    NeumorphicCard(
        modifier = Modifier.fillMaxWidth()
    ) {
        Row(
            modifier = Modifier.fillMaxWidth(),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Box(
                modifier = Modifier
                    .size(48.dp)
                    .clip(CircleShape)
                    .background(ErrorRed.copy(alpha = 0.1f)),
                contentAlignment = Alignment.Center
            ) {
                Icon(
                    imageVector = Icons.Default.Warning,
                    contentDescription = "Threat",
                    tint = ErrorRed,
                    modifier = Modifier.size(24.dp)
                )
            }
            
            Spacer(modifier = Modifier.width(12.dp))
            
            Column(
                modifier = Modifier.weight(1f)
            ) {
                Text(
                    text = threat.fileName,
                    style = MaterialTheme.typography.titleSmall,
                    fontWeight = FontWeight.Medium,
                    color = GrayText
                )
                
                Text(
                    text = "${threat.threatType} • ${threat.severity}",
                    style = MaterialTheme.typography.bodySmall,
                    color = GrayDark
                )
                
                Text(
                    text = "Detected: ${threat.detected}",
                    style = MaterialTheme.typography.labelSmall,
                    color = GrayDark
                )
            }
            
            Box(
                modifier = Modifier
                    .clip(RoundedCornerShape(6.dp))
                    .background(SuccessGreen.copy(alpha = 0.1f))
                    .padding(horizontal = 8.dp, vertical = 4.dp)
            ) {
                Text(
                    text = threat.action,
                    style = MaterialTheme.typography.labelSmall,
                    fontWeight = FontWeight.Medium,
                    color = SuccessGreen
                )
            }
        }
    }
}

@Composable
private fun ErrorInterface(
    onRetry: () -> Unit
) {
    NeumorphicCard(
        modifier = Modifier.fillMaxWidth()
    ) {
        Column(
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Icon(
                imageVector = Icons.Default.Error,
                contentDescription = "Error",
                tint = ErrorRed,
                modifier = Modifier.size(64.dp)
            )
            
            Spacer(modifier = Modifier.height(16.dp))
            
            Text(
                text = "Scan Failed",
                style = MaterialTheme.typography.titleLarge,
                fontWeight = FontWeight.Bold,
                color = GrayText
            )
            
            Text(
                text = "Unable to complete the security scan. Please try again.",
                style = MaterialTheme.typography.bodyMedium,
                color = GrayDark,
                textAlign = TextAlign.Center
            )
            
            Spacer(modifier = Modifier.height(24.dp))
            
            Button(
                onClick = onRetry,
                colors = ButtonDefaults.buttonColors(
                    containerColor = LightBlue,
                    contentColor = Color.White
                )
            ) {
                Icon(
                    imageVector = Icons.Default.Refresh,
                    contentDescription = "Retry",
                    modifier = Modifier.size(20.dp)
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text("Retry Scan")
            }
        }
    }
}